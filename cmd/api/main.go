// Code generated by hertz generator.

package main

import (
	"context"
	"fmt"
	"github.com/SIN5t/tiktok_v2/cmd/api/initialize"
	"github.com/SIN5t/tiktok_v2/pkg/viper"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/hertz-contrib/obs-opentelemetry/tracing"
	"github.com/hertz-contrib/pprof"
	"github.com/kitex-contrib/obs-opentelemetry/provider"
)

var config = viper.Init("api")
var hostPorts = fmt.Sprintf("%s:%d", config.GetString("server.host"), config.GetInt("server.port"))

func main() {
	//初始化client、中间件、jwt、logger...
	initialize.Init()

	p := provider.NewOpenTelemetryProvider(
		provider.WithServiceName(config.GetString("server.name")),
		provider.WithExportEndpoint(fmt.Sprintf("%s:%d", config.GetString("otel.host"), config.GetInt("otel.port"))),
		provider.WithInsecure(),
	)
	defer p.Shutdown(context.Background())
	// 链路追踪
	tracer, cfg := tracing.NewServerTracer()
	h := server.New(
		server.WithHostPorts(hostPorts),
		server.WithHandleMethodNotAllowed(true), // coordinate with NoMethod
		server.WithMaxRequestBodySize(10000000000),
		tracer,
	)

	// 使用 pprof 和 openTelemetry的tracer 两个中间件
	h.Use(tracing.ServerMiddleware(cfg))
	pprof.Register(h)
	register(h)
	h.Spin()
}
